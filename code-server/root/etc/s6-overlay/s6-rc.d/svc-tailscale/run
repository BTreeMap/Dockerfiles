#!/usr/bin/with-contenv bash

# Helper function to determine if a value is "truthy"
is_truthy() {
    local val
    # Return false if variable is not set or empty
    if [ -z "$1" ]; then
        return 1
    fi
    
    # Convert to lowercase
    val=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    
    # Check for truthy values
    case "$val" in
        true|yes|1|on|y)
            return 0 # True
            ;;
        *)
            return 1 # False
            ;;
    esac
}

# Check if Tailscale is enabled
if ! is_truthy "${TAILSCALE_ENABLED}"; then
    echo "INFO: Tailscale is disabled. Keeping the service running to prevent issues with s6-overlay."
    exec tail -f /dev/null -s 86400
fi

# Initialize flags for tailscaled
FLAGS=""

# Check if userspace networking is required (if /dev/net/tun does not exist)
if [ ! -e /dev/net/tun ]; then
    FLAGS="$FLAGS --tun=userspace-networking"
    echo "INFO: Using userspace networking for Tailscale."
fi

# Check if a persistent state directory is defined
if [ -n "${TAILSCALE_STATE_DIR}" ]; then
    FLAGS="$FLAGS --statedir=${TAILSCALE_STATE_DIR}"
else
    echo "WARNING: TAILSCALE_STATE_DIR is not set, using ephemeral state."
    FLAGS="$FLAGS --state=mem:"
fi

# Start tailscaled with the specified flags
if is_truthy "${TAILSCALE_TAILSCALED_NO_LOG}"; then
    # Redirect output to /dev/null if logging is disabled
    echo "INFO: Tailscale logging is disabled, redirecting output to /dev/null."
    echo "INFO: Starting tailscaled with flags: $FLAGS"
    exec tailscaled $FLAGS > /dev/null 2>&1
else
    # Log tailscaled output to stdout/stderr
    echo "INFO: Starting tailscaled with flags: $FLAGS"
    exec tailscaled $FLAGS
fi