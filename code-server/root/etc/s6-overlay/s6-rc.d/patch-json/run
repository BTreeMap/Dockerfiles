#!/usr/bin/with-contenv bash

# Set PUID and PGID from environment or default to 1000
: "${PUID:=1000}"
: "${PGID:=1000}"

# Set default options for patching behavior if not defined externally
: "${PATCH_JSON_USE_FORCE:=true}"           # Enables '--force' flag by default
: "${PATCH_JSON_ENABLE_SORT_KEYS:=true}"    # Enables JSON key sorting by default

# Helper function to determine if a value is "truthy"
is_truthy() {
    local val
    # Return false if variable is not set or empty
    if [ -z "$1" ]; then
        return 1
    fi
    
    # Convert to lowercase
    val=$(echo "$1" | tr '[:upper:]' '[:lower:]')
    
    # Check for truthy values
    case "$val" in
        true|yes|1|on|y)
            return 0 # True
            ;;
        *)
            return 1 # False
            ;;
    esac
}

# Function: patch_and_echo
# Description: Applies patches to a JSON file with optional flags, and logs the operation details.
patch_and_echo() {
  local source_file="$1"
  shift
  local patch_files=("$@")

  # Check if source file exists
  if [ ! -f "$source_file" ]; then
    echo "WARN: Source file '$source_file' does not exist. Skipping."
    return 0
  fi

  # Build flags based on environment variables
  local flags=""
  if is_truthy "$PATCH_JSON_USE_FORCE"; then
    flags+=" --force"
  fi
  if ! is_truthy "$PATCH_JSON_ENABLE_SORT_KEYS"; then
    flags+=" --no-sort-keys"
  fi

  echo "INFO: Applying patch to '$source_file' using: ${patch_files[*]}. Flags: '$flags'."
  if ! /opt/shared-venv/bin/python /opt/code-server-scripts/patch_json.py --source "$source_file" $flags --in-place "${patch_files[@]}"; then
    echo "WARN: Failed to patch '$source_file' with patch_json.py. Continuing."
    return 0
  fi
  echo "INFO: Changing ownership of $source_file to ${PUID}:${PGID}"
  chown "${PUID}:${PGID}" "$source_file"
  echo "INFO: Patching of '$source_file' completed."
}

# Check if PATCH_JSON is set to a value representing "true"
if is_truthy "$PATCH_JSON"; then
  patch_and_echo /config/data/Machine/settings.json /usr/share/code-server-scripts/patch_json/settings/*.json
  patch_and_echo /config/data/User/settings.json /usr/share/code-server-scripts/patch_json/settings/*.json
  echo "INFO: All JSON patches applied successfully."
else
  echo "INFO: PATCH_JSON is not enabled. Skipping JSON patching."
fi
